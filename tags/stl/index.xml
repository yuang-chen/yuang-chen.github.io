<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/">
  <channel>
    <title>STL on Yac&#39;s Log</title>
    <link>https://yuang-chen.github.io/tags/stl/</link>
    <description>Recent content in STL on Yac&#39;s Log</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Sat, 14 Oct 2023 12:17:12 +0800</lastBuildDate><atom:link href="https://yuang-chen.github.io/tags/stl/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Priority Queue</title>
      <link>https://yuang-chen.github.io/posts/2023-10-14-priority-queue/</link>
      <pubDate>Sat, 14 Oct 2023 12:17:12 +0800</pubDate>
      
      <guid>https://yuang-chen.github.io/posts/2023-10-14-priority-queue/</guid>
      <description>The motivation behind re-implementing the standard containers is the Priority Queue (or namely Max Heap). It combines algorithms and fundamental data structures to create a sophisticated yet highly efficient data structure. My current focus on reinventing these containers has temporarily paused here. Similar containers, like flat_set, are slated for release in C++23. When they become available, I plan to continue this series by attempting to re-implement them.
Description A priority queue is a container adapter offering constant time access to the largest (by default) element, albeit at the cost of logarithmic time insertion and extraction.</description>
    </item>
    
    <item>
      <title>Queue &amp; Stack</title>
      <link>https://yuang-chen.github.io/posts/2023-10-05-queue-stack/</link>
      <pubDate>Thu, 05 Oct 2023 10:30:44 +0800</pubDate>
      
      <guid>https://yuang-chen.github.io/posts/2023-10-05-queue-stack/</guid>
      <description>Description Both std::queue and std::stack are container adaptors that rely on an underlying container to provide specific functionality. For example:
std::queue implements a First-In-First-Out (FIFO) flow, making it efficient to remove the front element. It can use std::deque (by default) or std::list as the underlying container. std::stack follows a Last-In-First-Out (LIFO) flow, where the back element needs efficient modification. By default, it uses std::deque but can also be based on std::list or std::vector.</description>
    </item>
    
    <item>
      <title>Unordered {Set|Map|Multiset|Multimap}</title>
      <link>https://yuang-chen.github.io/posts/2023-09-27-unordered-set/</link>
      <pubDate>Wed, 27 Sep 2023 18:42:56 +0800</pubDate>
      
      <guid>https://yuang-chen.github.io/posts/2023-09-27-unordered-set/</guid>
      <description>Description The implementation of unordered containers rely on hashing techniques and utilize buckets for storing elements. Each bucket is essentially a vector containing a (singly) linked list. The following steps outline how elements are located, whether for finding, inserting, or erasing:
Compute the hash value of the key. Determine the bucket index by taking the remainder of the hash value divided by the bucket size, e.g., index = {hash value} % {bucket size}.</description>
    </item>
    
    <item>
      <title>Set &amp; Map</title>
      <link>https://yuang-chen.github.io/posts/2023-09-26-set-map/</link>
      <pubDate>Tue, 26 Sep 2023 00:09:48 +0800</pubDate>
      
      <guid>https://yuang-chen.github.io/posts/2023-09-26-set-map/</guid>
      <description>Description Both std::set and std::map are underpinned by red-black trees (RBT). RBTs are self-balancing binary trees, albeit not perfectly balanced. In this structure, it&amp;rsquo;s ensured that the values (for std::set) or keys (for std::map) adhere to the following condition: node→left &amp;lt; node &amp;lt; node→right. Consequently, the RBT are considered ordered, so std::set and std::map are called ordered containers.
RBT are characterized as follows:
Property
A node is either red or black.</description>
    </item>
    
    <item>
      <title>List</title>
      <link>https://yuang-chen.github.io/posts/2023-09-11-list/</link>
      <pubDate>Mon, 11 Sep 2023 16:33:34 +0800</pubDate>
      
      <guid>https://yuang-chen.github.io/posts/2023-09-11-list/</guid>
      <description>Description STL indeed offers std::list and std::forward_list, which are essentially double-linked list and single-linked list, respectively. std::list provides operations like push_back/front, pop_back/front with a time complexity of O(1), and supports bidirectional iterators. On the other hand, std::forward_list only allows fronting operations with O(1) and insert/erase_after for backing operations, which have a time complexity of O(n); also, it only supports forward iterators.
A valuable feature of lists is that they prohibit iterator invalidation compared to some other data structures.</description>
    </item>
    
    <item>
      <title>Deque</title>
      <link>https://yuang-chen.github.io/posts/2023-09-04-deque/</link>
      <pubDate>Mon, 04 Sep 2023 21:53:31 +0800</pubDate>
      
      <guid>https://yuang-chen.github.io/posts/2023-09-04-deque/</guid>
      <description>Description std::deque extends the interfaces of std::vector with push_front, pop_front, etc., such that elements can be inserted or removed at the end or beginning at constant time.
I&amp;rsquo;ve hardly ever incorporated std::deque in my own coding projects, and it&amp;rsquo;s a rarity in other people&amp;rsquo;s work as well.
Code std::deque is essentially a sequence of individually allocated fixed-size arrays. The real challenge lies in the bookkeeping. Four variables are relied on to keep track of data:</description>
    </item>
    
    <item>
      <title>Vector &amp; Array</title>
      <link>https://yuang-chen.github.io/posts/2023-09-02-vector-array/</link>
      <pubDate>Sat, 02 Sep 2023 10:59:59 +0800</pubDate>
      
      <guid>https://yuang-chen.github.io/posts/2023-09-02-vector-array/</guid>
      <description>Array is allocated in stack memory Vector is allocated in heap memory. Its capacity is “pre-allocated”. #include &amp;lt;iostream&amp;gt; template&amp;lt;typename T&amp;gt; class Vector { private: T* data_; size_t size_; size_t capacity_; public: Vector(): data_(nullptr), size_(0), capacity_(0) {} Vector(size_t n_): size_(n_), capacity_(n_) { data_ = new T[n_]; } ~Vector() { delete [] data_; }; T&amp;amp; operator[] (size_t index) { return data_[index]; } const T&amp;amp; operator[] (size_t index) const { return data_[index]; } size_t size() const { return size_; } void push_back(const T&amp;amp; value) { if(size_ == capacity_) { capacity_ = size_ == 0?</description>
    </item>
    
    <item>
      <title>STL Containers</title>
      <link>https://yuang-chen.github.io/posts/2023-08-30-stl-containers/</link>
      <pubDate>Wed, 30 Aug 2023 14:13:22 +0800</pubDate>
      
      <guid>https://yuang-chen.github.io/posts/2023-08-30-stl-containers/</guid>
      <description>In my HPC-oriented programming, my go-to choices are typically limited to arrays and vectors because of their memory efficiency. Linked lists and hash maps, being non-contiguous in memory space, rarely find their way into my toolkit. These containers draw upon many classic algorithmic designs. Lately, as I&amp;rsquo;ve been revisiting fundamental graph algorithms, I&amp;rsquo;ve also decided to take on the tasks of re-implementing these containers in a simplified illustration.
They are:</description>
    </item>
    
  </channel>
</rss>
